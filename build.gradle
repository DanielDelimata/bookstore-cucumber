plugins {
    id 'java'
    id 'io.qameta.allure' version '3.0.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

group = 'eu.delimata'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    allureVersion       = '2.25.0'
    assertJVersion      = '3.25.3'
    cucumberVersion     = '7.23.0'
    fakerVersion        = '1.0.2'
    jacksonVersion      = '2.17.2'
    junit5Version       = '5.10.2'
    junitPlatform       = '1.10.2'
    lombokVersion       = '1.18.32'
    restAssuredVersion  = '5.4.0'
    slf4jVersion        = '2.0.13'
}

dependencies {

    // JUnit / Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
    testImplementation "org.junit.platform:junit-platform-suite-engine:${junitPlatform}"
    testImplementation "org.junit.platform:junit-platform-launcher:${junitPlatform}"

    // Cucumber + Allure adapter
    testImplementation("io.cucumber:cucumber-java:${cucumberVersion}")
    testImplementation("io.cucumber:cucumber-junit-platform-engine:${cucumberVersion}")
    testImplementation("io.cucumber:cucumber-picocontainer:${cucumberVersion}")
    testImplementation("io.qameta.allure:allure-cucumber7-jvm:${allureVersion}")
    testImplementation("io.qameta.allure:allure-rest-assured:${allureVersion}")

    // Rest Assured
    testImplementation("io.rest-assured:rest-assured:${restAssuredVersion}")
    testImplementation("io.rest-assured:json-schema-validator:${restAssuredVersion}")

    // Other
    testImplementation("org.assertj:assertj-core:${assertJVersion}")
    testImplementation("org.slf4j:slf4j-simple:${slf4jVersion}")
    testImplementation("com.github.javafaker:javafaker:${fakerVersion}")
    testImplementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")

    // Lombok
    compileOnly ("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
}

defaultTasks 'clean', 'test'

test {
    useJUnitPlatform()

    def allureFromSys = System.getProperty("allure.results.directory")
    def allureFromEnv = System.getenv("ALLURE_RESULTS_DIR")
    def allureDir = allureFromSys ?: allureFromEnv ?: "${buildDir}/allure-results"
    systemProperty "allure.results.directory", allureDir

    def fromSys = System.getProperty("baseUrl")
    def fromEnv = System.getenv("BASE_URL")
    systemProperty "baseUrl", fromSys ?: fromEnv ?: "https://fakerestapi.azurewebsites.net"
    maxHeapSize = "2048m"
    jvmArgs '-Dfile.encoding=UTF-8'
}

tasks.withType(Test).configureEach {
    testLogging {
        showStandardStreams = true
        events "passed","skipped","failed"
    }
}